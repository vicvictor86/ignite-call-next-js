generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id       String  @id @default(uuid())
  username String  @unique
  name     String
  bio      String?
  email    String? @unique
  avatar   String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  accounts      Account[]
  sessions      Session[]
  timeIntervals UserTimeInterval[]
  schedulings   Scheduling[]

  @@map("users")
}

model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model UserTimeInterval {
  id        String @id @default(uuid())
  weekDay   Int    @map("week_day")
  startHour Int    @map("start_hour")
  endHour   Int    @map("end_hour")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("user_time_intervals")
}

model Scheduling {
  id           String   @id @default(uuid())
  date         DateTime
  name         String
  email        String
  observations String?
  createdAt    DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("schedulings")
}
